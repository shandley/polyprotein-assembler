/*
========================================================================================
    Polyprotein Assembler Pipeline Config
========================================================================================
    Configuration file for the Polyprotein Assembler pipeline.
----------------------------------------------------------------------------------------
*/

// Global parameters
params {
    // Input/output options
    reads         = "$projectDir/data/*_{1,2}.fastq.gz"
    outdir        = "results"
    
    // Resources
    threads       = 8
    max_memory    = '32.GB'
    max_cpus      = 16
    max_time      = '24.h'
    
    // Assembly options
    assembly_tool       = "megahit"
    min_contig_length   = 500
    min_protein_length  = 30
    
    // HMM search options
    hmm_db              = "$projectDir/db/polyprotein_profiles.hmm"
    hmm_evalue          = 1e-5
    hmm_dom_evalue      = 1e-3
    
    // Polyprotein completion options
    full_polyprotein_threshold  = 200  // Score threshold for full polyproteins
    partial_polyprotein_threshold = 50  // Score threshold for partial polyproteins
    
    // Fragment stitching options
    min_overlap         = 0.3  // Minimum overlap between fragments
    min_fragments       = 2    // Minimum number of fragments to stitch
    
    // Reference data
    adapter_file        = "$projectDir/assets/adapters.fa"
    
    // Temporary directories
    assembly_dir        = "$projectDir/${params.outdir}/assembly"
}

// Process resource configuration
process {
    // Default resources for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    // Process-specific resources
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 24.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 48.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
}

// Function to get the correct resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "WARNING: Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "WARNING: Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "WARNING: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Profiles
profiles {
    standard {
        process.executor = 'local'
    }
    docker {
        docker.enabled     = true
        docker.runOptions  = '-u $(id -u):$(id -g)'
        singularity.enabled = false
        
        // Check for Apple Silicon and use ARM64 images when available
        process.beforeScript = { 
            if (System.getProperty("os.arch") == "aarch64") {
                println "Detected Apple Silicon. Using ARM64 container images when available."
            }
        }
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
    }
    conda {
        conda.enabled          = true
        conda.useMamba         = true  // Use Mamba for faster dependency resolution
        docker.enabled         = false
        singularity.enabled    = false
        
        // Optimize for Apple Silicon when detected
        process.beforeScript = { 
            if (System.getProperty("os.arch") == "aarch64") {
                println "Detected Apple Silicon. Optimizing conda environments for ARM64."
            }
        }
    }
    // Profile specifically optimized for Apple Silicon
    apple_silicon {
        conda.enabled          = true
        conda.useMamba         = true
        process.executor       = 'local'
        
        // Optimization for memory-intensive processes on Apple Silicon
        withLabel:process_high {
            cpus   = { check_max( 6     * task.attempt, 'cpus'   ) }
            memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        }
        
        process.beforeScript = '''
            export CONDA_SUBDIR=osx-arm64
            export CONDA_OVERRIDE_OSX=1
        '''
    }
}

// Manifest
manifest {
    name            = 'polyprotein-assembler'
    author          = 'Scott Handley Lab'
    homePage        = 'https://github.com/scotthandley/polyprotein-assembler'
    description     = 'A workflow to assemble viral polyproteins from metagenomic data'
    mainScript      = 'main.nf'
    nextflowVersion = '>=21.04.0'
    version         = '1.0.0'
}